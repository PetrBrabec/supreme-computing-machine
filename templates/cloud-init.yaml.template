#cloud-config
package_update: true
package_upgrade: true

packages:
  - docker.io
  - docker-compose
  - ufw
  - restic
  - curl
  - git

write_files:
  - path: /root/.env
    content: |
      # PostgreSQL Configuration
      POSTGRES_USER={{POSTGRES_USER}}
      POSTGRES_PASSWORD={{POSTGRES_PASSWORD}}
      POSTGRES_DB={{POSTGRES_DB}}
      POSTGRES_NON_ROOT_USER={{POSTGRES_NON_ROOT_USER}}
      POSTGRES_NON_ROOT_PASSWORD={{POSTGRES_NON_ROOT_PASSWORD}}
      
      # Appwrite Configuration
      _APP_ENV={{APP_ENV}}
      _APP_OPENSSL_KEY_V1={{APP_OPENSSL_KEY}}
      _APP_DOMAIN={{APP_DOMAIN}}
      _APP_DOMAIN_TARGET={{APP_DOMAIN}}
      
      # Baserow Configuration
      SECRET_KEY={{BASEROW_SECRET_KEY}}
      DATABASE_PASSWORD={{BASEROW_DB_PASSWORD}}

      # Qdrant Configuration
      QDRANT_API_KEY={{QDRANT_API_KEY}}

      # Minio Configuration
      MINIO_ROOT_USER={{MINIO_ROOT_USER}}
      MINIO_ROOT_PASSWORD={{MINIO_ROOT_PASSWORD}}
      
      # Redis Configuration
      REDIS_PASSWORD={{REDIS_PASSWORD}}

      # Keycloak Configuration
      KEYCLOAK_ADMIN={{KEYCLOAK_ADMIN}}
      KEYCLOAK_ADMIN_PASSWORD={{KEYCLOAK_ADMIN_PASSWORD}}
      KC_DB={{KC_DB}}
      KC_DB_URL={{KC_DB_URL}}
      KC_DB_USERNAME={{KC_DB_USERNAME}}
      KC_DB_PASSWORD={{KC_DB_PASSWORD}}
      KC_HOSTNAME={{KC_HOSTNAME}}
      KC_PROXY={{KC_PROXY}}
      
      # Telegram Configuration
      TELEGRAM_BOT_TOKEN={{TELEGRAM_BOT_TOKEN}}
      TELEGRAM_CHAT_ID={{TELEGRAM_CHAT_ID}}
      
      # Backup Schedule (cron format)
      BACKUP_VOLUME_DEVICE={{BACKUP_VOLUME_DEVICE}}
      BACKUP_CRON={{BACKUP_CRON}}
      RESTIC_PASSWORD={{RESTIC_PASSWORD}}
      RESTIC_REPOSITORY=/mnt/backup/restic-repo

runcmd:
  # Set up firewall
  - ufw allow 22/tcp
  - ufw allow 80/tcp
  - ufw allow 443/tcp
  - ufw --force enable
  
  # Clone the repository
  - cd /root
  - git clone {{SETUP_REPOSITORY}} the-setup
  - cd the-setup
  
  # Create scripts directory
  - mkdir -p /root/scripts
  
  # Copy configuration files
  - cp docker-compose.yml /root/
  - cp Caddyfile /root/
  - cp -r scripts /root/
  
  # Make scripts executable
  - chmod +x /root/scripts/*.sh
  
  # Set up backup volume and initial backup
  - /root/scripts/mount-backup-volume.sh
  
  # Set up backup cron job
  - echo "$BACKUP_CRON root /root/scripts/backup-volumes.sh >> /var/log/volume-backup.log 2>&1" > /etc/cron.d/volume-backup
  
  # Start services
  - cd /root
  - docker compose pull
  - docker compose up -d
  
  # Test Telegram notifications
  - /root/scripts/test-telegram.sh
  
  # Add status check cron job
  - echo "0 9 * * * root /root/scripts/backup-status.sh >> /var/log/backup-status.log 2>&1" > /etc/cron.d/backup-status

power_state:
  mode: reboot
