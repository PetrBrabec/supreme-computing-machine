#cloud-config
package_update: true
package_upgrade: true

packages:
  - docker.io
  - docker-compose
  - ufw
  - restic
  - curl
  - git

write_files:
  - path: /root/.env
    content: |
      # Critical Configuration
      DOMAIN=${DOMAIN}
      CADDY_ACME_EMAIL=${CADDY_ACME_EMAIL}
      SETUP_REPOSITORY=${SETUP_REPOSITORY}

      # PostgreSQL Configuration
      POSTGRES_HOST=${POSTGRES_HOST}
      POSTGRES_PORT=${POSTGRES_PORT}
      POSTGRES_USER=${POSTGRES_USER}
      POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

      # N8N Database Configuration
      N8N_DB_USER=${N8N_DB_USER}
      N8N_DB_PASSWORD=${N8N_DB_PASSWORD}

      # Baserow Database Configuration
      BASEROW_DB_USER=${BASEROW_DB_USER}
      BASEROW_DB_PASSWORD=${BASEROW_DB_PASSWORD}

      # Keycloak Database Configuration
      KC_DB=${KC_DB}
      KC_DB_USERNAME=${KC_DB_USERNAME}
      KC_DB_PASSWORD=${KC_DB_PASSWORD}

      # Appwrite Configuration
      _APP_ENV=${APPWRITE_ENV}
      _APP_OPENSSL_KEY_V1=${APPWRITE_OPENSSL_KEY}
      _APP_DOMAIN=${APPWRITE_DOMAIN}
      _APP_DOMAIN_TARGET=${APPWRITE_DOMAIN_TARGET}

      # Qdrant Configuration
      QDRANT_API_KEY=${QDRANT_API_KEY}

      # Minio Configuration
      MINIO_ROOT_USER=${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}

      # Redis Configuration
      REDIS_PASSWORD=${REDIS_PASSWORD}

      # Backup Configuration
      RESTIC_PASSWORD=${RESTIC_PASSWORD}
      BACKUP_CRON="${BACKUP_CRON}"
      BACKUP_VOLUME_PATH=${BACKUP_VOLUME_PATH}
      BACKUP_MOUNT_POINT=${BACKUP_MOUNT_POINT}
      TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      RESTIC_REPOSITORY=${RESTIC_REPOSITORY}

runcmd:
  # Initial notification
  - cd /root
  - git clone ${SETUP_REPOSITORY} supreme-computing-machine
  - cd supreme-computing-machine
  - chmod +x scripts/*.sh
  - ./scripts/notify.sh "🚀 *Server Setup Started*%0AStarting installation of Supreme Computing Machine..."
  
  # Configure firewall
  - ./scripts/notify.sh "🛡️ Configuring firewall..."
  - ufw default deny incoming
  - ufw default allow outgoing
  - ufw allow 22/tcp
  - ufw allow 80/tcp
  - ufw allow 443/tcp
  - ufw --force enable
  
  # Copy configuration files
  - ./scripts/notify.sh "📝 Copying configuration files..."
  - cp /root/.env .env
  
  # Mount backup volume and initialize
  - ./scripts/notify.sh "💾 Mounting backup volume..."
  - ./scripts/mount-backup-volume.sh
  
  # Set up backup cron job
  - echo "${BACKUP_CRON} root /root/supreme-computing-machine/scripts/backup-volumes.sh >> /var/log/volume-backup.log 2>&1" > /etc/cron.d/volume-backup
  
  # Start services
  - ./scripts/notify.sh "🚀 Starting services..."
  - ./scripts/deploy-services.sh
  
  # Run health checks only if SKIP_SERVICES_CHECK is not set
  - |
    if [ "${SKIP_SERVICES_CHECK}" != "true" ]; then
      /root/supreme-computing-machine/scripts/check-services.sh
    else
      echo "Skipping services check as SKIP_SERVICES_CHECK=true"
    fi
  
  # Check services and send final notification
  - |
    ./scripts/notify.sh "✅ *Setup Complete*
    Supreme Computing Machine is now running!

    Services:
    - Appwrite: https://appwrite.${DOMAIN}
    - n8n: https://n8n.${DOMAIN}
    - Baserow: https://baserow.${DOMAIN}
    - Qdrant: https://qdrant.${DOMAIN}
    - MinIO: https://minio.${DOMAIN}
    - Keycloak: https://auth.${DOMAIN}"

power_state:
  mode: reboot
